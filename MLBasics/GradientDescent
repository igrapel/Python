# PACKAGE
import matplotlib.pyplot as plt
import numpy as np

x= np.array([51.25,   53.75,   56.25,   58.75,   61.25,   63.75,   66.25,
         68.75,   71.25,   73.75,   76.25,   78.75,   81.25,   83.75,
         86.25,   88.75,   91.25,   93.75,   96.25,   98.75,  101.25,
        103.75,  106.25,  108.75,  111.25,  113.75,  116.25,  118.75,
        121.25,  123.75,  126.25,  128.75,  131.25,  133.75,  136.25,
        138.75,  141.25,  143.75,  146.25,  148.75,  151.25,  153.75,
        156.25,  158.75,  161.25,  163.75,  166.25,  168.75,  171.25,
        173.75,  176.25,  178.75,  181.25,  183.75,  186.25,  188.75,
        191.25,  193.75,  196.25,  198.75,  201.25,  203.75,  206.25,
        208.75,  211.25,  213.75,  216.25,  218.75,  221.25,  223.75,
        226.25,  228.75,  231.25,  233.75,  236.25,  238.75,  241.25,
        243.75,  246.25,  248.75,  251.25,  253.75,  256.25,  258.75,
        261.25,  263.75,  266.25,  268.75,  271.25,  273.75,  276.25,
        278.75,  281.25,  283.75,  286.25,  288.75,  291.25,  293.75,
        296.25,  298.75])

# This is the Gaussian function.
def f (x,mu,sig) :
    return np.exp(-(x-mu)**2/(2*sig**2)) / np.sqrt(2*np.pi) / sig

# Next up, the derivative with respect to μ.
# If you wish, you may want to express this as f(x, mu, sig) multiplied by chain rule terms.
# === COMPLETE THIS FUNCTION ===
def dfdmu (x,mu,sig) :
    return ((np.exp(-(x-mu)**2/(2*sig**2)) / np.sqrt(2*np.pi) / sig)) * ((x-mu) / (sig**2))

# Derivative with respect to σ.

def dfdsig (x,mu,sig) :
    return (1/np.sqrt(2*np.pi)) * (-sig**-2 * np.exp(-(x-mu)**2/(2*sig**2)) + (np.exp(-(x-mu)**2/(2*sig**2))*(x-mu)**2 / sig**4)) 
    
    
# The Jacobian
def steepest_step (x, y, mu, sig, aggression) :
    J = np.array([
        -2*(y - f(x,mu,sig)) @ dfdmu(x,mu,sig),
        -2*(y - f(x,mu,sig)) @ dfdsig(x,mu,sig) # Replace the ??? with the second element of the Jacobian.
    ])
    step = -J * aggression
    return step# First get the heights data, ranges and frequencies
x,y = heights_data()



# Next we'll assign trial values for these.
mu = 155 ; sig = 6
# We'll keep a track of these so we can plot their evolution.
p = np.array([[mu, sig]])

# Plot the histogram for our parameter guess
histogram(f, [mu, sig])
# Do a few rounds of steepest descent.
for i in range(50) :
    dmu, dsig = steepest_step(x, y, mu, sig, 2000)
    mu += dmu
    sig += dsig
    p = np.append(p, [[mu,sig]], axis=0)
# Plot the path through parameter space.
contour(f, p)
# Plot the final histogram.
histogram(f, [mu, sig])
    
    
 # First get the heights data, ranges and frequencies
x,y = heights_data()

# Next we'll assign trial values for these.
mu = 155 ; sig = 6
# We'll keep a track of these so we can plot their evolution.
p = np.array([[mu, sig]])

# Plot the histogram for our parameter guess
histogram(f, [mu, sig])
# Do a few rounds of steepest descent.
for i in range(50) :
    dmu, dsig = steepest_step(x, y, mu, sig, 2000)
    mu += dmu
    sig += dsig
    p = np.append(p, [[mu,sig]], axis=0)
# Plot the path through parameter space.
contour(f, p)
# Plot the final histogram.
histogram(f, [mu, sig])
